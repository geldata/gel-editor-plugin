# [PackageDev] target_format: plist, ext: tmLanguage
---
name: EdgeQL
scopeName: source.edgeql
fileTypes: ['edgeql', 'esdl', 'gel']
uuid: a560aad6-9c13-49c5-a369-5fb272c8ec1a


patterns:
  - include: '#all'

repository:
  $apply:
    - file: 'fncalls.inc.syntax.yaml'
    - file: 'builtins.inc.syntax.yaml'

  all:
    patterns:
      - include: '#fnstatement'
      - include: '#expressions'
      - name: punctuation.statement.delimiter.edgeql
        match: (;)

  expressions:
    patterns:
      - include: '#comments'
      - include: '#code'
      - include: '#keywords'
      - include: '#fncalls'
      - include: '#operators'
      - include: '#builtins'
      - include: '#types'
      - include: '#quoted-name'
      - include: '#values'
      - include: '#link-properties'
      - include: '#variables'
      - include: '#parentheses'
      - include: '#squarebraces'
      - include: '#curlybraces'
      - include: '#casts'

  code:
    patterns:
      - match: |
          (?xi)
            \b(FROM) \s+ (EDGEQL | SQL) \s+ (EXPRESSION)
        captures:
          '1': {name: keyword.declaration.edgeql}
          '3': {name: keyword.declaration.edgeql}

      - begin: |
          (?xi)
            \b(FROM) \s+
            (SQL) \s+
            (\$\w?\$)
        end: (\3)
        beginCaptures:
          '1': {name: keyword.declaration.edgeql}
          '3': {name: string.quoted.edgeql}
        endCaptures:
          '1': {name: string.quoted.edgeql}
        patterns:
          - include: 'source.sql'

      - begin: |
          (?xi)
            \b(FROM) \s+
            (EDGEQL) \s+
            (\$\w?\$)
        end: (\3)
        beginCaptures:
          '1': {name: keyword.declaration.edgeql}
          '3': {name: string.quoted.edgeql}
        endCaptures:
          '1': {name: string.quoted.edgeql}
        patterns:
          - include: 'source.edgeql'

  fnstatement:
    begin: (?ix) \b(?<![:\.])(FUNCTION|AGGREGATE|ABSTRACT CONSTRAINT)\b
    end: (?=[^\s\w:]|\bEXTENDING\b|$)
    beginCaptures:
      '1': {name: keyword.declaration.edgeql}
    patterns:
      - include: '#builtins'
      - include: '#identifier'
      - name: keyword.operator.namespace.edgeql
        match: (::)

  fncallargs:
    patterns:
      - include: '#definition'
      - include: '#expressions'
      - name: punctuation.separator.arguments.edgeql
        match: (,)
      - name: invalid.illegal.delimiter.edgeql
        match: (;)

  definition:
    match: |
      (?x)
        (?:
          ([[:alpha:]_][[:alnum:]_]*)
          |
          ([\.\d]\S*?)
        ) (?=\s*:=)
    captures:
      '1': {name: variable.parameter.definition.edgeql}
      '2': {name: invalid.illegal.definition.edgeql}

  parencommon:
    patterns:
      - name: punctuation.separator.element.edgeql
        match: (,)
      - name: invalid.illegal.delimiter.edgeql
        match: (;)

  parentheses:
    begin: (\()
    end: (\))
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeql}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeql}
    patterns:
      - include: '#expressions'
      - include: '#parencommon'

  squarebraces:
    begin: (\[)
    end: (\])
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeql}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeql}
    patterns:
      - name: keyword.operator.edgeql
        match: (^|\b|\s)(->)($|\b|\s)
      - include: '#expressions'
      - include: '#parencommon'

  curlybraces:
    begin: (\{)
    end: (\})
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeql}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeql}
    patterns:
      - include: '#comments'
      - include: '#commandblock'
      - include: '#shape'

  commandblock:
    begin: (?=SET|CREATE|ALTER|DROP|RENAME|FROM)
    end: (?=\})
    patterns:
      - include: '#all'

  shape:
    begin: (?=\S)
    end: (?=\})
    patterns:
      - name: punctuation.statement.delimiter.edgeql
        match: (;)
      - include: '#expressions'
      - include: '#parencommon'

  comments:
    patterns:
      - name: comment.line.number-sign.edgeql
        match: (#)\s*((BUG|FIXME|TODO|XXX)).*$\n?
        captures:
          '1': {name: punctuation.definition.comment.edgeql}
          '2': {name: comment.line.note.notation.edgeql}
          '3': {name: comment.line.note.edgeql}
      - name: comment.line.number-sign.edgeql
        match: (#).*$\n?
        captures:
          '1': {name: punctuation.definition.comment.edgeql}

  keywords:
    patterns:
      - name: constant.language.boolean.true.edgeql
        match: (?i)\b(TRUE)\b

      - name: constant.language.boolean.false.edgeql
        match: (?i)\b(FALSE)\b

      - name: constant.language.empty.edgeql
        match: (?i)\b(EMPTY)\b

      - name: keyword.declaration.edgeql
        match: (?i)\b(?<!::|\.|\.<|\.>)(CONSTRAINT)\b(?!=\s+\()

      - name: keyword.declaration.edgeql
        $apply:
          - file: 'keywords.inc.syntax.yaml'

  operators:
    patterns:
      - name: keyword.operator.navigation.edgeql
        match: (\.[<>])
      - name: keyword.operator.namespace.edgeql
        match: (::)
      - name: keyword.declaration.edgeql
        match: ->
      - name: punctuation.declaration.delimiter.edgeql
        match: (:(?!=))
      - name: keyword.operator.edgeql
        $apply:
          - file: 'operators.inc.syntax.yaml'

  types:
    patterns:
      - begin: \b(?<!::|\.)(tuple)\s*(<)
        end: (>)
        beginCaptures:
          '1': {name: storage.type.edgeql}
          '2': {name: storage.type.placeholder.begin.edgeql}
        endCaptures:
          '1': {name: storage.type.placeholder.end.edgeql}
        patterns:
          - include: '#types'
          - name: punctuation.separator.type.edgeql
            match: (,)
          - match: (:)
          - include: '#types-common'

      - begin: \b(?<!::|\.)(array)\s*(<)
        end: (>)
        beginCaptures:
          '1': {name: storage.type.edgeql}
          '2': {name: storage.type.placeholder.begin.edgeql}
        endCaptures:
          '1': {name: storage.type.placeholder.end.edgeql}
        patterns:
          - name: invalid.illegal.type.edgeql
            match: array
          - include: '#types'
          - include: '#array-dimensions'
          - include: '#types-common'

      - name: storage.type.edgeql
        match: |
          (?x) \b(?<!::|\.)(
            array | tuple
          )\b

      - include: '#builtin-modules'
      - include: '#builtin-types'
      - include: '#builtin-indexes'

  types-common:
    patterns:
      - include: '#identifier'
      - name: keyword.operator.namespace.edgeql
        match: (::)

  array-dimensions:
    begin: (\[)
    end: (\])
    beginCaptures:
      '1': {name: punctuation.parenthesis.begin.edgeql}
    endCaptures:
      '1': {name: punctuation.parenthesis.end.edgeql}
    patterns:
      - name: constant.numeric.edgeql
        match: (\d+)
      - name: invalid.illegal.type.edgeql
        match: \S+

  variables:
    name: constant.language.variable.edgeql
    begin: (\$)(?=[[:alnum:]_]|`)
    end: (?<=[[:alnum:]_`])
    patterns:
      - include: '#identifier'
      - include: '#quoted-name'
      - match: (\d)+

  link-properties:
    name: support.other.linkproperty.edgeql
    begin: (\@)
    end: (?<=[[:alnum:]_`])
    patterns:
      - include: '#identifier'
      - include: '#quoted-name'

  identifier:
    match: ([[:alpha:]_][[:alnum:]_]*)

  quoted-name:
    name: string.interpolated.edgeql
    match: (`.*?`)

  values:
    patterns:
      - include: '#number'
      - include: '#bytes'
      - include: '#string'

  number:
    patterns:
      - name: constant.numeric.float.edgeql
        match: |
          (?x)
            (?:
              #decimal part
              \.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \b(?: [1-9](?: [0-9_]*[0-9] )? | 0 )
                (?:\.(_*)[0-9](?:[0-9_]*[0-9])?)
            )
            ((_*)([eE][\+\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?

            (_*)
            \b
        captures:
          '1': {name: invalid.illegal.dec.edgeql}
          '2': {name: invalid.illegal.dec.edgeql}
          '4': {name: invalid.illegal.dec.edgeql}
          '5': {name: storage.type.number.edgeql}
          '6': {name: invalid.illegal.dec.edgeql}
          '7': {name: invalid.illegal.dec.edgeql}

      - name: constant.numeric.float.edgeql
        match: |
          (?x)
            (?:
              # integer part
              \b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            ((_*)([eE][\+\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)

            (_*)
            \b
        captures:
          '2': {name: invalid.illegal.dec.edgeql}
          '3': {name: storage.type.number.edgeql}
          '4': {name: invalid.illegal.dec.edgeql}
          '5': {name: invalid.illegal.dec.edgeql}

      - name: constant.numeric.decimal.edgeql
        match: |
          (?x)
            (?:
              #decimal part
              \.(_*)(?:[0-9](?:[0-9_]*[0-9])?)
              |
              # integer part
              \b(?:[1-9](?:[0-9_]*[0-9])?|0)
                (?:\.(_*)[0-9](?:[0-9_]*[0-9])?)?
            )
            ((_*)([eE][\+\-]?)(_*)[0-9](?:[0-9_]*[0-9])?)?

            (_*)
            (n)
        captures:
          '1': {name: invalid.illegal.dec.edgeql}
          '2': {name: invalid.illegal.dec.edgeql}
          '4': {name: invalid.illegal.dec.edgeql}
          '5': {name: storage.type.number.edgeql}
          '6': {name: invalid.illegal.dec.edgeql}
          '7': {name: invalid.illegal.dec.edgeql}
          '8': {name: storage.type.number.edgeql}

      - name: constant.numeric.integer.edgeql
        match: |
          (?x)
            (?:
              # integer part
              \b(?:[1-9](?:[0-9_]*[0-9])?|0)
            )
            (_*)
            \b
        captures:
          '1': {name: invalid.illegal.dec.edgeql}
          '2': {name: invalid.illegal.dec.edgeql}

  string:
    patterns:
      - name: string.quoted.raw.edgeql
        begin: (r)(['"])
        end: (\2)
        beginCaptures:
          '1': {name: storage.type.string.edgeql}
          '2': {name: punctuation.definition.string.begin.edgeql}
        endCaptures:
          '1': {name: punctuation.definition.string.end.edgeql}

      - name: string.quoted.edgeql
        begin: (['"])
        end: (\1)
        beginCaptures:
          '1': {name: punctuation.definition.string.begin.edgeql}
        endCaptures:
          '1': {name: punctuation.definition.string.end.edgeql}
        patterns:
          - include: '#string-escapes'
          - include: '#string-invalid-escapes'

      - name: string.dollar.edgeql
        begin: (\$([[:alpha:]_][[:alnum:]]*)*\$)
        end: (\1)
        beginCaptures:
          '1': {name: punctuation.definition.string.begin.edgeql}
        endCaptures:
          '1': {name: punctuation.definition.string.end.edgeql}

  string-escapes:
    name: constant.character.escape.edgeql
    match: |
      (?x)
        (
          \\(?=\s*\n) |
          \\[\\'"bfnrt] |
          \\x[0-7][0-9a-fA-F] |
          \\u[0-9a-fA-F]{4} |
          \\U[0-9a-fA-F]{8}
        )

  string-invalid-escapes:
    name: invalid.illegal.escapes.edgeql
    match: (\\.)

  bytes:
    patterns:
      - name: string.quoted.bytes.edgeql
        begin: (b)(')
        end: (\2)
        beginCaptures:
          '1': {name: storage.type.string.edgeql}
          '2': {name: punctuation.definition.string.begin.edgeql}
        endCaptures:
          '1': {name: punctuation.definition.string.end.edgeql}
        patterns:
          - include: '#bytes-escapes'
          # exclude the actual quote from the legal bytes
          - match: ([\n -&(-\[\]-~])+
          - name: invalid.illegal.bytes.edgeql
            match: (\\x.{1,2})|(\\.)|(.)

      - name: string.quoted.bytes.edgeql
        begin: (b)(")
        end: (\2)
        beginCaptures:
          '1': {name: storage.type.string.edgeql}
          '2': {name: punctuation.definition.string.begin.edgeql}
        endCaptures:
          '1': {name: punctuation.definition.string.end.edgeql}
        patterns:
          - include: '#bytes-escapes'
          # exclude the actual quote from the legal bytes
          - match: ([\n -!#-\[\]-~])+
          - name: invalid.illegal.bytes.edgeql
            match: (\\x.{1,2})|(\\.)|(.)

  bytes-escapes:
    name: constant.character.escape.edgeql
    match: |
      (?x)
        (
          \\[\\'"bfnrt] |
          \\x[0-9a-fA-F]{2}
        )

  casts:
    begin: |
      (?xi)
        (?:
          (?<= ^ | [@~+\-*/%^<>=?,:(\[{])
          |
          (?<=
            AND | OR | NOT | LIKE | ILIKE | IS | IN | IF | ELSE |
            UNION | ALL | EXISTS |

            SELECT | GROUP | UPDATE | BY | THEN | LIMIT |
            # there are some ligature-related issues with "fi" and "ff"
            F[Ii]LTER | OF[Ff]SET
          )
        ) \s* (\<)
    end: (\>)
    beginCaptures:
      '1': {name: keyword.operator.cast.begin.edgeql}
    endCaptures:
      '1': {name: keyword.operator.cast.end.edgeql}
    contentName: meta.typecast.edgeql
    patterns:
      - include: '#types'
      - include: '#types-common'
...
